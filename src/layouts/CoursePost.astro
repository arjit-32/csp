---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '@/components/FormattedDate'
import BaseLayout from '@/layouts/BaseLayout'
import Tag from '@/components/Tag'
import type { MarkdownHeading } from 'astro'
import { Image } from 'astro:assets'

type Props = {
	id: CollectionEntry<'courses'>['id']
	data: CollectionEntry<'courses'>['data']
	headings: MarkdownHeading[]
	readTime: string
}

const { data, readTime, headings, id } = Astro.props
const { title, description, course, path, draft, pubDate } = data

const articleDate = pubDate.toISOString()
---

<BaseLayout
	title={title}
	description={description}
	image={"http://localhost:4321/_image?href=%2F%40fs%2FD%3A%2Farjitsharma32%2Fcsp%2Fsrc%2Fassets%2Fimages%2Fbg.jpg%3ForigWidth%3D2400%26origHeight%3D1920%26origFormat%3Djpg&w=1000&h=500&q=100&f=jpg"}
	articleDate={articleDate}
>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
			
				<h1 class='text-center text-4xl md:text-6xl md:pb-2.5 font-semibold'>
					{title}
				</h1>
				<div class='flex items-center justify-center gap-x-1'>
					<p class='text-center text-sm text-opacity-50'>
						 <FormattedDate date={pubDate} />
					</p>
					<p class='text-center text-sm text-opacity-50 font-bold'>
						| {readTime}
					</p>
				</div>
			</div>

		</header>

		<hr />

		<div>
			<slot />
		</div>
	</article>
</BaseLayout>

<script>
	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
